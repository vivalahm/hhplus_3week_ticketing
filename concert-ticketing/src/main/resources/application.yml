spring:
  application:
    name: concert-ticketing
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        use_new_id_generator_mappings: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: true
  data:
    redis:
      host: localhost
      port: 6379

  cache:
    type: redis
    redis:
      time-to-live: 600000 # Cache TTL in milliseconds

  kafka:
    bootstrap-servers:
      - localhost:9092
      - localhost:9093
      - localhost:9094
    consumer:
      group-id: concert-ticketing-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  swagger-ui:
    path: /api-test
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
  paths-to-match:
    - /api/**

logging:
  level:
    com.hhplus.concertticketing: INFO

management:
  endpoints:
    metrics:
      enabled: true
    web:
      exposure:
        include: health,info,metrics,prometheus

payment_topic: PAYMENT-INFO